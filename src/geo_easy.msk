# supported languages
global geoLangs
array set geoLangs {hun hu eng {en us} ger {ge de} rus ru cze cz es {es}}
# language codes for windows
global langCodes
array set langCodes {"040E" hun "0409" eng "0407" ger "0419" rus "0405" cze "040A" es}
# GUI language change default to hun/eng/ger/... to set GUI language other than OS lang
global geoLang
set geoLang {default}
# code page
global geoCp
# set geoCp {cp-1250}
# link to help/docs
global geoDoc
set geoDoc "See:\nhttp://github.com/zsiki/GeoEasy/doc and\nhttps://github.com/zsiki/GeoEasy/wiki"
# automatic window refresh
global autoRefresh
set autoRefresh {1}
# standard deviations, corrections
global angleUnits distUnits projRed avgH stdAngle stdDist1 stdDist2 refr stdLevel
# angle units DMS/GON
set angleUnits {DMS}
# distance units m/feet
set distUnits {m}
# projection reduction mm/km
set projRed {0.0}
# average elevation above mean see level
set avgH {0.0}
# standard deviation for directions
set stdAngle {3.0}
# standard deviation for distances stdDist1 + km * stdDist2
set stdDist1 {3.0}
# standard deviation for distances stdDist1 + km * stdDist2
set stdDist2 {3.0}
# standard deviation for levelling mm/km
set stdLevel {0.3}
# refraction korrection 0/1 no/yes
set refr {0}
# limit for kollimation and index error
global maxColl maxIndex
set maxColl {360}
set maxIndex {360}
# separator for exported coordinate lists
global cooSep
set cooSep {;}
# separators for imported coordinate files
global txtSep multiSep txtFilter header
# default text file separators
set txtSep {	;}
# merge delimiters 0/1 no/yes
set multiSep {0}
# regexp to filter input lines
set txtFilter {}
# header lines to skip
set header {0}
# number of decimals in results/field booksand coordinatelists
global decimals
set decimals {3}
# detail points in orientation and adjustment 0/1 no/yes
global oriDetail
set oriDetail {0}
# regexp for detail points
global detailreg
set detailreg {^[0-9]+([-/]?([a-zA-Z]|[0-9])+)?$}
# default data directory
global lastDir
set lastDir {.}
# regression parameters
global maxIteration epsReg
# max iteration count
set maxIteration {5000}
# tolerance to stop iteration
set epsReg {0.00005}
# gama-local parameters (network adjustment)
global gamaProg gamaConf gamaAngles gamaTol dirLimit gamaShortOut gamaSvgOut gamaXmlOut
# relative path to executable from GeoEasy home directory or absolute path
set gamaProg {./gama-local}
# confidence level
set gamaConf {0.95}
# 360 - DMS , 400 GRAD
set gamaAngles {360}
set gamaTol {1000}
# distance limit for direction weighting
set dirLimit {200}
# long/short result list 0/1 NOT IMPLEMENTED YET
set gamaShortOut {0}
# svg error ellipses 0/1
set gamaSvgOut {0}
# preserve gama xml output 0/1
set gamaXmlOut {0}
#
# triangle parameters
#
global triangleProg
# relative path to executable from GeoEasy home directory or absolute path
set triangleProg {./triangle}
#
# cs2cs (projection transformation) parameters
#
global cs2csProg
# relative path to executable from GeoEasy home directory or absolute path
set cs2csProg {./cs2cs}
#
# dxf output parameters
#
global rp dxpn dypn dxz dyz spn sz pon zon slay pnlay zlay p3d pd zdec \
    pcodelayer bname battr block ptext xzplane useblock addlines
set p3d {0}
set pd {0}
set pon {1}
set zon {1}
set slay {PT}
set pnlay {PN}
set zlay {ZN}
set rp {1.0}
set dxpn {0.8}
set dypn {1.0}
set dxz {0.8}
set dyz {-1.0}
set spn {1.8}
set sz {1.5}
set zdec {2}
set pcodelayer {0}
set xzplane {0}
set useblock {0}
set addlines {0}
# html browser (UNIX)
global browser
set browser {}
# rtf viewer (UNIX)
global rtfview
set rtfview {}
# dxf viewer (UNIX)
global dxfview
set dxfview {}
# kml fill color
global polyStyle
set polyStyle {32d2d2d2}
# X3D diffusecolor
global x3dColor
set x3dColor {0.7 0.7 0.7}
#	mask colors
global geoMaskColors
set geoMaskColors {black red blue green cyan}
# color for not used observations
global geoNotUsedColor
set geoNotUsedColor {dark slate gray}
# colors in graphic window
#
#	geoLineColor - color for lines
#	geoObsColor - color for observaton lines
#	geoFinalColor - point id color for fix
#	geoApprColor  - point id color for approximate
#	geoStationColor - color for station symbol
#	geOrientationColor - color for oriented station symbol
#	geoNostationColor  - color for non station points
global geoLineColor geoObsColor geoFinalColor geoApprColor geoStationColor geoOrientationColor geoNostationColor
set geoLineColor {black}
set geoObsColor {yellow}
set geoFinalColor {black}
set geoApprColor {red}
set geoStationColor {red}
set geoOrientationColor {green}
set geoNostationColor {white}
# default parameters for graphic windows
#   defaultObservations   1/0 observation lines on/off
#   defaultDetails        1/0 detail points on/off
#   defaultPointNumbers   1/0 point id texts on/off
#   defaultUsedPointsOnly 1/0 observed points only on/off
#   defaultCodedLines     1/0 point connections from codes
global defaultObservations defaultDetails defaultPointNumbers defaultUsedPointsOnly defaultCodedLines
set defaultObservations {1}
set defaultDetails {1}
set defaultPointNumbers {1}
set defaultUsedPointsOnly {0}
set defaultCodedLines {0}
# linework set regLineStart to empty string to use simple line mode
# the linework tag must be at the end of the code
global regLineStart regLineCont regLineEnd regLine regLineClose
set regLine {_l$}
set regLineStart {_st$}
set regLineCont {_co$}
set regLineEnd {_en$}
set regLineClose {_cl$}
#
#	masks for observation display
#	=============================
#	a mask consists of two parts geoMask(maskname) és geoMaskParams(maskname)
#	both parts are obligatory
#
#	geoMask(masknev) is a list of:
#		1st item: "table"
#		2nd item: integer
#			 number of rows in table
#		3rd-nth item: integer code list
#			between "{" "}" markers code list to be displayed,
#			if more than one code given, thn the first found will be show
#			with the corresponding color from geoMaskColors
#			coordinate codes cannot be used (37 38 39 137 138 139)
#
#	geoMasParams(maskname) display parameters for value given in  geoMask
#			beállítása a 3. - n. paraméterekre vonatkozik a geoMasks(masknev)-ben
#		1st-nth format definition for the corresponding item from  geoMasks
#			possible values like  "-", "DMS", "DEC n m" "format %.2f"
#			"-" show previous value
#				e.g. it is used for station number in field books
#			"" string value
#			"DMS" angle in DMS unit (DDD-MM-SS format)  DEPRICATED use ANG
#			"DMS1" angle in DMS units (DDD-MM-SS.S format)  DEPRICATED use ANG
#			"GON" angle in GRAD units (4 decimals)  DEPRICATED use ANG
#			"DEG" angle in DEG units (4 decimals)  DEPRICATED use ANG
#			"FEET" length/cordinate in foots    DEPRICATED use DST
#			"OL" length in fathoms  DEPRICATED use DST
#			"FLOAT" real number, number of decials from global parameter
#			"INT" integer number
#		DEC DEPRICATED!!!!!!
#			"DEC n m" width "n", decimals "m"
#				if m = 0 integer value
#				if n = 0 width equal to the minimal neccessary value
#		format DEPRICATED!!!!
#			"format "%n.mt" C like format
#				a C language format conrollers can be used
#				e.g. %8.2f real value in 8 char wide field with 2 decimals
#				    %10s text right aligned in 10 char wide field
#				    %-10s text left aligned in 10 char wide field
#
global maskRows
# default number of rows in masks
set maskRows {20}
global geoMasks geoMaskParams geoMaskWidths geoMaskDefault
set geoMaskDefault {tahimeter}
set geoMasks(tahimeter_code) {table 20 2 {5 62} 4 {6 3} {7 21 -7} {8 -8} {9 11 -9}}
set geoMaskParams(tahimeter_code) {"-" "" "" DST ANG ANG DST}
set geoMaskWidths(tahimeter_code) {10 10 10 10 10 10 10}
set geoMasks(orientation) {table 20 2 {62 5} {7 21 -21} {100 101}}
set geoMaskParams(orientation) {"-" "" ANG ANG}
set geoMaskWidths(orientation) {10 10 10 10}
set geoMasks(horiz) {table 20 2 {5 62} {7 21 -7} {8 -8} {11 9 -9}}
set geoMaskParams(horiz) {"-" "" ANG ANG DST}
set geoMaskWidths(horiz) {10 10 10 10 10}
set geoMasks(tahimeter) {table 20 2 {5 62} {6 3} {7 21 -7} {8 -8} {9 11 -9}}
set geoMaskParams(tahimeter) {"-" "" DST ANG ANG DST}
set geoMaskWidths(tahimeter) {10 10 10 10 10 10}
set geoMasks(tahimeter_dm) {table 20 2 {5 62} {6 3} {7 21 -7} {10 120 -10} {9 11 -9}}
set geoMaskParams(tahimeter_dm) {"-" "" DST ANG DST DST}
set geoMaskWidths(tahimeter_dm) {10 10 10 10 10 10}
set geoMasks(levelling) {table 20 2 {5 62} {10 120 -10} {9 11 -9}}
set geoMaskParams(levelling) {"-" "" DST DST}
set geoMaskWidths(levelling) {10 10 10 10}
#
#	masks for coordinate lists
#	similiar to field book masks but only
#	4,5,37,38,39,40,41,42,138,137,139,111 codes are considered
#	codes:
#		  5 - point id
#		 38 - easting
#		 37 - northing
#		 39 - magasság
#		 41 - change in easting (compering to othe coordinate list)
#        40 - change in northing
#		 42 - change in elevation
#		138,
#		137,
#		139 - prelimenary coordinates
#		111 - point order
#		  4 - point code
#
global cooMasks cooMaskParams cooMaskWidths cooMaskDefault
set cooMaskDefault {prelim_fix}
set cooMasks(difference) {table 20 5 4 38 37 39 41 40 42}
set cooMaskParams(difference) {"" "" DST DST DST DST DST DST}
set cooMaskWidths(difference) {10 10 10 10 10 10 10 10}
set cooMasks(prelim_fix) {table 20 5 4 {38 138} {37 137} {39 139}}
set cooMaskParams(prelim_fix) {"" "" DST DST DST}
set cooMaskWidths(prelim_fix) {10 10 10 10 10}
set cooMasks(fix) {table 20 5 4 38 37 39}
set cooMaskParams(fix) {"" "" DST DST DST}
set cooMaskWidths(fix) {10 10 10 10 10}
set cooMasks(fix_stdev) {table 20 5 4 38 238 37 237 39 239}
set cooMaskParams(fix_stdev) {"" "" DST FLOAT DST FLOAT DST FLOAT}
set cooMaskWidths(fix_stdev) {10 10 10 10 10 10 10 10}
#
# mask parameters
#
global parMask
set parMask {51 52 53 55 114 115 116 118 0}
